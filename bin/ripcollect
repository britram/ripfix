#!/usr/bin/env ruby1.9

require 'ipfix/tool'
include IPFIX

msgcount = 0
tmplcount = 0
reccount = 0

rc = CollectorTool.new
rc.parse_args(ARGV)

rc.start_collector

rc.on_template_add do |domain, template|
  tmplcount += 1
  isoptions = template.respond_to?(:scope_count) ? "options ": ""
  puts "----- #{isoptions}template #{domain}/#{template.tid} (##{tmplcount}) -----"
  puts template.spec
end

rc.on_missing_template do |message, set|
  puts "***** missing template for #{set.set_id} in domain #{message.domain} *****"
end

rc.on_bad_sequence do |message, expected|
  puts " **** bad sequence for domain #{message.domain}: got #{message.sequence}, expected #{expected} ****"
end

rc.on_new_message do |message|
  msgcount += 1
  puts "===== message #{message.domain}/#{message.sequence} @#{message.export_time} (##{msgcount}) ====="
end

rc.each do |h, m|
  reccount += 1
  puts "  --- record #{m.domain}/#{m.template.tid} (##{reccount})---"
  h.each do |k, v|
    if v.kind_of? Array
      puts "#{k} =>"
      puts Buffer.dump(v)
    else
      puts "#{k} => #{v.to_s}"
    end
  end
end

STDERR.puts("End of stream")
STDERR.puts("got #{msgcount} messages, #{tmplcount} templates, #{reccount} records")